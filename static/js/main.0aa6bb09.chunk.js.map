{"version":3,"sources":["utils.ts","components/board/board.tsx","constants.ts","components/header/header.tsx","assets/icons/search.svg","store/reducer.ts","components/hooks/reduxHooks.ts","components/search/search.tsx","http/index.ts","pages/dashboard/dashboard.tsx","assets/icons/chevron.svg","components/footer/footer.tsx","pages/results-finalize/results-finalize.tsx","components/app/app.tsx","store/index.ts","index.tsx"],"names":["getSiteName","sites","siteId","find","el","id","url","replace","capitalise","str","charAt","slice","toLowerCase","Board","props","history","useHistory","test","name","type","status","data","statusStyle","color","styleButton","background","fixedStatus","useMemo","fixedType","site","text","className","style","onClick","push","Header","title","dataSlice","createSlice","initialState","tests","immutableTests","reducers","getData","state","action","payload","searchMatch","filter","indexOf","sortAlphabet","order","key","JSON","parse","stringify","sort","a","b","localeCompare","resetResult","getTest","sortStatus","online","paused","stopped","draft","actions","useDispatchHook","dispatch","useDispatch","getMatch","value","sortOrder","dropResult","setOrderStatus","useSelectorHook","useSelector","Search","setValue","placeholder","onChange","e","target","src","search","alt","length","$host","axios","create","baseURL","process","fetchData","get","fetchTest","response","Dashboard","useState","loading","setLoading","setOrder","handleClick","prevState","useEffect","loadData","map","Footer","chevron","ResultsFinalize","location","useLocation","useParams","partLocation","replaceAll","getPartUrl","pathname","loadTest","App","path","exact","to","rootReducer","combineReducers","reducer","store","configureStore","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0aa6bb09.chunk.js","sourcesContent":["import {ISite} from './store/reducer';\r\n\r\nexport const getSiteName = (sites: ISite[], siteId: number): string => {\r\n    return sites\r\n        .find(el => el.id === siteId)!.url\r\n        .replace('http://', '')\r\n        .replace('https://', '')\r\n        .replace('www.', '');\r\n}\r\n\r\nexport const getSiteNumber = (sites: ISite[], url: string) => {\r\n\r\n    return sites.find((site: ISite) => site.url === url)!.id\r\n}\r\n\r\nexport const capitalise = (str: string) => str.charAt(0) + str.slice(1).toLowerCase()\r\n\r\nexport const capitaliseType = (str: string) => {\r\n    return str === 'MVT' ? str : capitalise(str)\r\n}\r\n\r\nexport const getPartUrl = (location: string) => location\r\n    .replaceAll('/', '')\r\n    .replaceAll(/\\d+/g, '');\r\n","import React, {useMemo} from 'react';\r\nimport {ITest, IData} from '../../store/reducer';\r\nimport {useHistory} from 'react-router-dom';\r\n\r\nimport './board.sass';\r\nimport {capitalise, capitaliseType, getSiteName} from '../../utils';\r\nimport {black, crimson, gray, green, lightGreen, peach} from \"../../constants\";\r\n\r\ninterface IBoardProps {\r\n    test: ITest\r\n    data: IData\r\n}\r\n\r\nconst Board = (props: IBoardProps) => {\r\n\r\n    const history = useHistory();\r\n\r\n    const {test: {siteId, name, type, status, id}, data} = props;\r\n    const {sites} = data;\r\n\r\n    const statusStyle = {\r\n        color: status === 'ONLINE' ? lightGreen :\r\n               status === 'STOPPED' ? crimson :\r\n                   status === \"PAUSED\" ? peach : black\r\n    }\r\n\r\n    const styleButton = {background: status === 'DRAFT' ? gray : green}\r\n\r\n    const fixedStatus = useMemo(() => {\r\n        return capitalise(status)\r\n    }, [status]);\r\n\r\n    const fixedType = useMemo(() => {\r\n        return capitaliseType(type)\r\n    }, [type])\r\n\r\n    const site = getSiteName(sites, siteId);\r\n\r\n    const text = status === 'DRAFT' ? 'Finalize' : 'Result';\r\n\r\n    const handleClick = () => {\r\n        const url = (status === 'DRAFT' ? `/${text}/${id}` : `/${text}s/${id}`).toLowerCase();\r\n        history.push(url);\r\n    }\r\n\r\n    return (\r\n        <div className={'board'}>\r\n            <div className={'board_column'}>{name}</div>\r\n            <div className={'board_column'}>{fixedType}</div>\r\n            <div className={'board_column'} style={statusStyle}>{fixedStatus}</div>\r\n            <div className={'board_column'}>{site}</div>\r\n            <div>\r\n                <button\r\n                    className={'board_button'}\r\n                    style={styleButton}\r\n                    onClick={handleClick}\r\n                >\r\n                    {text}\r\n                </button>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Board;","export const lightGreen = '#1BDA9D';\r\nexport const crimson = '#FE4848';\r\nexport const peach = '#FF8346';\r\nexport const black = '#5C5C5C';\r\nexport const green = '#2EE5AC';\r\nexport const gray = '#7D7D7D';","import React from 'react';\r\nimport './header.sass';\r\n\r\ninterface IHeader {\r\n    title: string,\r\n    text?: string\r\n}\r\n\r\nconst Header = (props: IHeader) => {\r\n    const {title, text} = props;\r\n\r\n    return (\r\n        <header className={'header'}>\r\n            <div className={'header_title'}>{title}</div>\r\n            {text && <div className={'header_text'}>{text}</div>}\r\n        </header>\r\n    );\r\n};\r\n\r\nexport default Header;","export default __webpack_public_path__ + \"static/media/search.5a18a1eb.svg\";","import {createSlice} from '@reduxjs/toolkit';\r\nimport {getSiteName} from \"../utils\";\r\n\r\ntype Types = 'CLASSIC' | 'SERVER_SIDE' | 'MVT';\r\n\r\ntype StatusType = 'DRAFT' | 'ONLINE' | 'PAUSED' | 'STOPPED';\r\n\r\nexport interface ISite {\r\n    id: number;\r\n    url: string;\r\n}\r\n\r\nexport interface ITest {\r\n    id: string;\r\n    name: string;\r\n    type: Types;\r\n    status: StatusType;\r\n    siteId: number;\r\n}\r\n\r\nexport interface IData {\r\n    sites: ISite[];\r\n    tests: ITest[];\r\n    immutableTests: ITest[],\r\n    test: ITest\r\n}\r\n\r\nconst initialState: IData = {\r\n    sites: [],\r\n    tests: [],\r\n    immutableTests: [],\r\n    test: {\r\n        id: '',\r\n        name: '',\r\n        type: 'CLASSIC',\r\n        status: \"ONLINE\",\r\n        siteId: 1\r\n    }\r\n}\r\n\r\nexport const dataSlice = createSlice({\r\n    name: 'data',\r\n    initialState,\r\n    reducers: {\r\n        getData(state, action) {\r\n            state.sites = action.payload.sites;\r\n            state.tests = action.payload.tests;\r\n            state.immutableTests = action.payload.tests\r\n        },\r\n        searchMatch(state, action) {\r\n            state.tests = !!action.payload ?\r\n                state.tests.filter(test => test.name.toLowerCase().indexOf(action.payload.toLowerCase()) !== -1) :\r\n                state.immutableTests;\r\n        },\r\n        sortAlphabet(state, action) {\r\n\r\n            const {order, key} = action.payload;\r\n\r\n            let tests = JSON.parse(JSON.stringify(state.tests));\r\n            let sites = JSON.parse(JSON.stringify(state.sites));\r\n\r\n            const compare = (a: any, b: any) => {\r\n\r\n                if (key === 'siteId') {\r\n                    a = getSiteName(sites, a[key]);\r\n                    b = getSiteName(sites, b[key]);\r\n\r\n                    if (order) return a.localeCompare(b)\r\n                    return b.localeCompare(a)\r\n                }\r\n\r\n                if (order) return a[key].localeCompare(b[key])\r\n                return b[key].localeCompare(a[key])\r\n\r\n            }\r\n\r\n            tests.sort(compare)\r\n            state.tests = tests;\r\n\r\n        },\r\n        resetResult(state) {\r\n            state.tests = state.immutableTests;\r\n        },\r\n        getTest(state, action) {\r\n            state.test = action.payload\r\n        },\r\n        sortStatus(state, action) {\r\n\r\n            const tests = state.tests;\r\n\r\n            const online = tests.filter(test => test.status === 'ONLINE');\r\n            const paused = tests.filter(test => test.status === 'PAUSED');\r\n            const stopped = tests.filter(test => test.status === 'STOPPED');\r\n            const draft = tests.filter(test => test.status === 'DRAFT');\r\n\r\n            if (action.payload) {\r\n                state.tests = [...online, ...paused, ...stopped, ...draft]\r\n\r\n            } else {\r\n                state.tests = [...draft, ...stopped, ...paused, ...online]\r\n            }\r\n        }\r\n    }\r\n})\r\n\r\nexport const {getData, searchMatch, sortAlphabet, resetResult, getTest, sortStatus} = dataSlice.actions;\r\n\r\nexport default dataSlice.reducer\r\n\r\n","import {TypedUseSelectorHook, useDispatch, useSelector} from 'react-redux';\r\nimport {AppDispatch, RootState} from '../../store';\r\nimport {searchMatch, sortAlphabet, resetResult, sortStatus} from '../../store/reducer';\r\n\r\ninterface ISortOrder {\r\n    order: boolean,\r\n    key: string\r\n}\r\n\r\nexport const useDispatchHook = () => {\r\n\r\n    const dispatch = useDispatch<AppDispatch>();\r\n    const getMatch = (value: string) => dispatch(searchMatch(value));\r\n    const sortOrder = (action: ISortOrder) => dispatch(sortAlphabet(action));\r\n    const setOrderStatus = (order: boolean) => dispatch(sortStatus(order));\r\n    const dropResult = () => dispatch(resetResult());\r\n\r\n    return {getMatch, sortOrder, dropResult, setOrderStatus}\r\n\r\n}\r\n\r\nexport const useSelectorHook: TypedUseSelectorHook<RootState> = useSelector;","import search from '../../assets/icons/search.svg';\r\nimport {useDispatchHook} from '../../components/hooks/reduxHooks';\r\n\r\nimport './search.sass';\r\nimport {ITest} from '../../store/reducer';\r\n\r\ninterface ISearchProps {\r\n    tests: ITest[],\r\n    value: string\r\n    setValue: (value: string) => void\r\n}\r\n\r\nconst Search = (props: ISearchProps) => {\r\n\r\n    const {getMatch} = useDispatchHook();\r\n\r\n    const {tests, value, setValue} = props;\r\n\r\n    return (\r\n        <div className={'search'}>\r\n            <div className=\"search_frame\">\r\n                <input\r\n                    type={'text'}\r\n                    placeholder={'What test are you looking for?'}\r\n                    value={value}\r\n                    onChange={(e) => {\r\n                        setValue(e.target.value);\r\n                        getMatch(e.target.value);\r\n                    }}\r\n                />\r\n                <img src={search} alt={'search'}/>\r\n                <div className=\"search_tests\">{`${tests.length} tests`}</div>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Search;","import axios from 'axios';\r\nimport {AppDispatch} from '../store';\r\nimport {getData, getTest} from '../store/reducer';\r\n\r\nconst $host = axios.create({\r\n    baseURL: process.env.REACT_APP_API_URL\r\n})\r\n\r\nexport const fetchData = async (dispatch: AppDispatch) => {\r\n\r\n    const sites  = await $host.get('sites');\r\n    const tests  = await $host.get('tests');\r\n\r\n    const data = {sites: sites.data, tests: tests.data};\r\n\r\n    dispatch(getData(data))\r\n}\r\n\r\nexport const fetchTest = async(dispatch: AppDispatch, id: string) => {\r\n\r\n    const response = await $host.get(`tests/${id}`);\r\n    dispatch(getTest(response.data))\r\n}\r\n","import React, {useEffect, useState} from 'react';\r\nimport Board from '../../components/board/board';\r\nimport Header from '../../components/header/header';\r\nimport './dashboard.sass'\r\nimport Search from '../../components/search/search';\r\nimport {fetchData} from '../../http/index';\r\nimport {useDispatchHook, useSelectorHook} from '../../components/hooks/reduxHooks';\r\nimport {useDispatch} from 'react-redux';\r\n\r\ninterface IOrderState {\r\n    [key: string]: boolean,\r\n}\r\n\r\nconst Dashboard = () => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const {sortOrder, dropResult, setOrderStatus} = useDispatchHook();\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const [order, setOrder] = useState<IOrderState>({\r\n        name: false,\r\n        type: false,\r\n        site: false,\r\n        status: false\r\n    })\r\n\r\n    const [value, setValue] = useState<string>('')\r\n\r\n    const {data} = useSelectorHook(state => state);\r\n\r\n    const {tests} = data;\r\n\r\n    const handleClick = (key: string) => {\r\n        setOrder((prevState: IOrderState) => ({...prevState, key: !prevState.key}))\r\n        sortOrder({order: !order.key, key});\r\n    }\r\n\r\n    const handleClickStatus = () => {\r\n        setOrder((prevState: IOrderState) => ({...prevState, status: !prevState.status}))\r\n        setOrderStatus(!order.status);\r\n    }\r\n\r\n    const handleReset = () => {\r\n        dropResult();\r\n        setValue('')\r\n    }\r\n\r\n    async function loadData () {\r\n        await fetchData(dispatch);;\r\n        setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadData()\r\n    }, [])\r\n\r\n    return (\r\n        <div className={'dashboard'}>\r\n            {loading ?\r\n                <div>Loading...</div>\r\n            :\r\n                <>\r\n                    <Header title={'dashboard'}/>\r\n                    <main>\r\n                        <Search tests={tests} value={value} setValue={setValue}/>\r\n                        {tests.length ?\r\n                            <>\r\n                                <div className='dashboard_header'>\r\n                                    <div className='dashboard_column' onClick={() => handleClick('name')}>name</div>\r\n                                    <div className='dashboard_column' onClick={() => handleClick('type')}>type</div>\r\n                                    <div className='dashboard_column' onClick={handleClickStatus}>status</div>\r\n                                    <div className='dashboard_column' onClick={() => handleClick('siteId')}>site</div>\r\n                                </div>\r\n                                <div className=\"boards\">\r\n                                    {tests.map(test =>\r\n                                        <Board test={test} data={data} key={test.id}/>\r\n                                    )}\r\n                                </div>\r\n                            </>\r\n                            :\r\n                            <div className='empty-search'>\r\n                                <div className='empty-search_text'>Your search did not match any results.</div>\r\n                                <button onClick={handleReset}>Reset</button>\r\n                            </div>\r\n\r\n                        }\r\n                    </main>\r\n                </>\r\n            }\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Dashboard;","export default __webpack_public_path__ + \"static/media/chevron.b52c3203.svg\";","import React from 'react';\r\nimport chevron from '../../assets/icons/chevron.svg';\r\nimport './footer.sass';\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\nconst Footer = () => {\r\n\r\n    let history = useHistory();\r\n\r\n    return (\r\n        <footer className={'footer'}>\r\n            <button onClick={()=> history.push('/dashboard')}>\r\n                <img src={chevron} alt={'back'}/>\r\n            </button>\r\n            <div>back</div>\r\n        </footer>\r\n    );\r\n};\r\n\r\nexport default Footer;","import React, {useEffect, useState} from 'react';\r\nimport {useLocation, useParams} from 'react-router-dom';\r\nimport './results-finalize.sass';\r\nimport {getPartUrl} from '../../utils';\r\nimport Header from '../../components/header/header';\r\nimport Footer from '../../components/footer/footer';\r\nimport {useDispatch} from \"react-redux\";\r\nimport {fetchTest} from \"../../http\";\r\nimport {useSelectorHook} from \"../../components/hooks/reduxHooks\";\r\n\r\ninterface IuseParams {\r\n    id: string\r\n}\r\n\r\nconst ResultsFinalize = () => {\r\n\r\n    const [loading, setLoading] = useState(true);\r\n\r\n    const location = useLocation();\r\n\r\n    const {id} = useParams<IuseParams>();\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const partLocation = getPartUrl(location.pathname);\r\n\r\n    const {data} = useSelectorHook(state => state);\r\n\r\n    const {test} = data;\r\n\r\n    async function loadTest () {\r\n        await fetchTest(dispatch, id);\r\n        setLoading(false);\r\n    }\r\n\r\n    useEffect(() => {\r\n        loadTest();\r\n    }, [])\r\n\r\n    return (\r\n        <div className='results-finalize'>\r\n            {loading ?\r\n                <div>Loading...</div>\r\n                :\r\n                <>\r\n                    <Header title={partLocation} text={test.name}/>\r\n                    <Footer/>\r\n                </>\r\n            }\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default ResultsFinalize;","import React from 'react';\nimport {BrowserRouter, Route, Switch, Redirect} from 'react-router-dom';\nimport Dashboard from '../../pages/dashboard/dashboard';\nimport ResultsFinalize from '../../pages/results-finalize/results-finalize';\nimport './app.sass'\n\nconst App = () => {\n    return (\n        <div className={'app'}>\n            <BrowserRouter>\n              <Switch>\n                  <Route path={'/dashboard'} exact>\n                    <Dashboard/>\n                  </Route>\n                  <Route path={'/results/:id'} exact>\n                      <ResultsFinalize/>\n                  </Route>\n                  <Route path={'/finalize/:id'} exact>\n                      <ResultsFinalize/>\n                  </Route>\n                  <Redirect to={'/dashboard'}/>\n              </Switch>\n            </BrowserRouter>\n        </div>\n    );\n};\n\nexport default App;","import {combineReducers, configureStore} from '@reduxjs/toolkit';\r\nimport reducer from './reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    data: reducer\r\n})\r\n\r\nexport const setupStore = () => {\r\n    return configureStore({\r\n        reducer: rootReducer,\r\n    })\r\n};\r\n\r\nconst store = setupStore();\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>\r\nexport type AppStore = ReturnType<typeof setupStore>\r\nexport type AppDispatch = AppStore['dispatch']\r\n\r\nexport default store;\r\n\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './components/app/app';\nimport {Provider} from 'react-redux';\nimport store from './store/index';\n\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>\n    ,\n    document.getElementById('root'));\n\n\n"],"sourceRoot":""}